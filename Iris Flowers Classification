# 1) Iris Flowers Classification ML Project :
# Steps to Classify Iris Flower:

#1. Loading of the dataset

#2. Analyzing and visualizing the dataset

#3. Model training

#4. Model Evaluation

#5. Testing the model

# First we have to import some packages

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
%matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report

#Step 1 – Load the data:
df = pd.read_csv("C:\\Users\\User\\Downloads\\Iris.csv")
df.head()

#Step 2 – Analyze and visualize the dataset:
# Some basic statistical analysis about the data
df.describe()

#Drop unwanted columns
df=df.drop(columns="Id")

# Visualize the whole dataset
sns.pairplot(df, hue='Species')

#Step 3 – Model training:

# Split the data to train and test dataset.
train, test = train_test_split(df, test_size = 0.3) # in this our main data is split into train and test

# the attribute test_size=0.3 splits the data into 70% and 30% ratio. train=70% and test=30%

print(train.shape)
print(test.shape)
train_X = train[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]# taking the training data features
train_y=train.Species        # output of our training data
test_X= test[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']] # taking test data features
test_y =test.Species   #output value of test data

train_X.head(2)
test_X.head(2)
train_y.head()  ##output of the training data
# Support vector machine algorithm

from sklearn.svm import SVC
svn = SVC()

#Step 4 – Model Evaluation:

# Predict from the test dataset
predictions = svn.predict(test_X)
# Calculate the accuracy

accuracy_score(test_y, predictions)
# A detailed classification report

print(classification_report(test_y, predictions))

#Step 5 – Testing the model:

X_new = np.array([[3, 2, 1, 0.2], [  4.9, 2.2, 3.8, 1.1 ], [  5.3, 2.5, 4.6, 1.9 ]])
#Prediction of the species from the input vector
prediction = svn.predict(X_new)
print("Prediction of Species: {}".format(prediction))
svn.fit(train_X, train_y)

# Save the model
import pickle
with open('SVM.pickle', 'wb') as f:
    pickle.dump(svn, f)
# Load the model
with open('SVM.pickle', 'rb') as f:
    model = pickle.load(f)
model.predict(X_new)
